// Copyright (C) 2022 Nikunj Gupta
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
//  Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program. If not, see <https://www.gnu.org/licenses/>.

module Vector
{
    include "eigen3/Eigen/Core";

    include "aum/util/sizes.hpp";
    include "aum/util/generator.hpp";
    include "aum/backend/custom_callbacks.hpp";

    include "cmath";

    extern module Exitter;
    extern module Scalar;

    message part_vector_msg
    {
        double arr[];
    };

    array[1D] Vector
    {
        ////////////////////////////////////////////////////////////////////////
        // Basic Constructors                                                 //
        ////////////////////////////////////////////////////////////////////////
        entry Vector(int, int);  // Size
        entry Vector(int, int, bool);  // Initialize from array
        entry Vector(int, int, aum::random); // Size, Random Initialization
        entry Vector(int, double, int);  // Size, Value
        entry Vector(int, std::unique_ptr<aum::generator>, int);   // Random Generation

        entry void initialize_data(int size_, double data[size_]);

        ////////////////////////////////////////////////////////////////////////
        // Operation over vector                                              //
        ////////////////////////////////////////////////////////////////////////
        entry void initialize_operation()
        {
            for (; WRITE_TAG > -1;)
            {
                case
                {
                    ////////////////////////////////////////////////////////////
                    // BLAS Operations                                        //
                    ////////////////////////////////////////////////////////////
                    // BLAS L1: axpy
                    when
                        axpy[WRITE_TAG](int write_tag, double multiplier),
                        input_vector_1[WRITE_TAG](vector_msg* msg1),
                        input_vector_2[WRITE_TAG](vector_msg* msg2),
                        input_scalar[WRITE_TAG](int write_tag, double value)
                    {
                        serial "axpy"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg1->arr, msg1->size);
                            evec_t e2(msg2->arr, msg2->size);

                            evec_t e(vec.data(), vec.size());

                            value = multiplier * value;

                            e = value * e1 + e2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    when
                        axpy_scalar[WRITE_TAG](int write_tag, double value),
                        input_vector_1[WRITE_TAG](vector_msg* msg1),
                        input_vector_2[WRITE_TAG](vector_msg* msg2)
                    {
                        serial "axpy_scalar"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg1->arr, msg1->size);
                            evec_t e2(msg2->arr, msg2->size);

                            evec_t e(vec.data(), vec.size());

                            e = value * e1 + e2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    when
                        norm[READ_TAG](int read_tag, int scalar_tag, int p, CProxy_Scalar proxy)
                    {
                        serial "norm"
                        {
                            using evec_t = Eigen::Map<Eigen::Array<double, 1, Eigen::Dynamic>>;
                            evec_t e(vec.data(), vec.size());
                            
                            double val = Eigen::pow(e, p).sum();

                            CkCallback cb(CkReductionTarget(Scalar, reduced_norm), proxy);
                            contribute(sizeof(double), &val, CkReduction::sum_double, cb, scalar_tag);

                                                        // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    when
                        max[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy)
                    {
                        serial "max"
                        {
                            using evec_t = Eigen::Map<Eigen::Array<double, 1, Eigen::Dynamic>>;
                            evec_t e(vec.data(), vec.size());

                            Eigen::Index index;
                            
                            double val = e.maxCoeff(&index);

                            IndexPack res{static_cast<int>(index), val};

                            CkCallback cb(CkReductionTarget(Scalar, set_index_pack), proxy);
                            contribute(sizeof(double), &res, MaxIndexType, cb, scalar_tag);

                                                        // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    when
                        min[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy)
                    {
                        serial "min"
                        {
                            using evec_t = Eigen::Map<Eigen::Array<double, 1, Eigen::Dynamic>>;
                            evec_t e(vec.data(), vec.size());

                            Eigen::Index index;
                            
                            double val = e.minCoeff(&index);

                            IndexPack res{static_cast<int>(index), val};

                            CkCallback cb(CkReductionTarget(Scalar, set_index_pack), proxy);
                            contribute(sizeof(double), &res, MaxIndexType, cb, scalar_tag);

                                                        // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation Add:
                    // The generalized addition operation takes two vectors
                    // as arguments and updates the current vector with the
                    // sum of the two vectors.
                    when
                        add[WRITE_TAG](int write_tag),
                        input_vector_1[WRITE_TAG](vector_msg* msg1),
                        input_vector_2[WRITE_TAG](vector_msg* msg2)
                    {
                        serial "vector_addition"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg1->arr, msg1->size);
                            evec_t e2(msg2->arr, msg2->size);

                            evec_t e(vec.data(), vec.size());

                            e = e1 + e2;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    // Operation Add:
                    // The generalized addition operation takes one vector
                    // as argument and updates the current vector.
                    when
                        plus_add[WRITE_TAG](int write_tag),
                        input_vector_1[WRITE_TAG](vector_msg* msg)
                    {
                        serial "vector_single_addition"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg->arr, msg->size);

                            evec_t e(vec.data(), vec.size());

                            e += e1;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation Subtract:
                    // The generalized subtraction operation takes two vectors
                    // as arguments and updates the current vector with the
                    // sum of the two vectors.
                    when
                        subtract[WRITE_TAG](int write_tag),
                        input_vector_1[WRITE_TAG](vector_msg* msg1),
                        input_vector_2[WRITE_TAG](vector_msg* msg2)
                    {
                        serial "vector_subtraction"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg1->arr, msg1->size);
                            evec_t e2(msg2->arr, msg2->size);

                            evec_t e(vec.data(), vec.size());

                            e = e1 - e2;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    // Operation subtract:
                    // The generalized subtraction operation takes one vector
                    // as argument and updates the current vector.
                    when
                        minus_subtract[WRITE_TAG](int write_tag, bool inverted),
                        input_vector_1[WRITE_TAG](vector_msg* msg)
                    {
                        serial "vector_single_subtraction"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg->arr, msg->size);

                            evec_t e(vec.data(), vec.size());

                            if (inverted)
                                e = e1 - e;
                            else
                                e -= e1;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation dot:
                    // The generalized index wise multiply then reduce
                    when
                        dot[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy),
                        input_vector_1[READ_TAG](vector_msg* msg)
                    {
                        serial "dot_product"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e1(msg->arr, msg->size);
                            evec_t e(vec.data(), vec.size());

                            double val = e.dot(e1);

                            CkCallback cb(CkReductionTarget(Scalar, set_reduced_value), proxy);
                            contribute(sizeof(double), &val, CkReduction::sum_double, cb, scalar_tag);

                            // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation self dot:
                    // Optimized kernel for dot product where both vectors 
                    // are the same. e.g., aum::dot(a, a);
                    when
                        self_dot[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy)
                    {
                        serial "self_dot"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e(vec.data(), vec.size());

                            double val = e * e.transpose();

                            CkCallback cb(CkReductionTarget(Scalar, set_reduced_value), proxy);
                            contribute(sizeof(double), &val, CkReduction::sum_double, cb, scalar_tag);

                            // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation scalar multiply:
                    // The generalized index wise scalar multiply
                    when
                        scalar_multiply[WRITE_TAG](int write_tag, double value),
                        input_vector_1[WRITE_TAG](vector_msg* msg)
                    {
                        serial "scalar_multiply"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;
                        
                            evec_t e(vec.data(), vec.size());
                            evec_t e1(msg->arr, msg->size);

                            e = value * e1;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation scalar multiply:
                    // The generalized index wise scalar multiply
                    when
                        aum_scalar_multiply[WRITE_TAG](int write_tag),
                        input_vector_1[WRITE_TAG](vector_msg* msg),
                        input_scalar[WRITE_TAG](int write_tag, double value)
                    {
                        serial "aum_scalar_multiply"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;
                        
                            evec_t e(vec.data(), vec.size());
                            evec_t e1(msg->arr, msg->size);

                            e = value * e1;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Reduction target
                    when
                        assemble_reduced[WRITE_TAG](int write_tag, int offset, int size1, double arr[size1], int red_count)
                    {
                        serial "assemble_reduced"
                        {
                            // Initialize to 0
                            if (reduction_counter == 0)
                                std::fill(vec.begin(), vec.end(), 0);
                            
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e(vec.data() + offset, size1);
                            evec_t incoming(arr, size1);

                            e += incoming;

                            // Operation is now complete - set up read facility
                            // on this data.
                            if (++reduction_counter == red_count)
                            {
                                // All possible reductions have submitted
                                // results. Move to next operation!
                                reduction_counter = 0;
                                ++WRITE_TAG;
                                READ_TAG = WRITE_TAG + 1;
                            }
                        }
                    }

                    // Operation copy_value
                    // Helper function to copy from one container to the 
                    // other container.
                    when
                        copy_value[WRITE_TAG](int write_tag),
                        input_vector_1[WRITE_TAG](vector_msg* msg)
                    {
                        serial "copy_value"
                        {
                            std::memcpy(&vec[0], msg->arr, (msg->size) * sizeof(double));

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation reduce_add:
                    // Helper reduction that adds all elements of a vector
                    when
                        reduce_add[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy)
                    {
                        serial "reduce_add"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_t e(vec.data(), vec.size());

                            double val = e.sum();

                            CkCallback cb(CkReductionTarget(Scalar, set_reduced_value), proxy);
                            contribute(sizeof(double), &val, CkReduction::sum_double, cb, scalar_tag);

                            // Since dot produce isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation update_read:
                    // Callback function called when a send function sends a
                    // pointer instead of actual data. Required for the fulfillment
                    // of a read contract.
                    when update_read()
                    {
                        serial "update_read"
                        {
                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send_to_1:
                    // Helper function to send the value of underlying vector
                    // to the site where an operation is to be performed.
                    when send_to_1[READ_TAG](int read_tag, int write_tag, CProxy_Vector pv)
                    {
                        serial "send_to_1"
                        {
                            vector_msg* msg = make_vector_msg(vec.size(), vec.data(), READ_TAG);
                            CkSetRefNum(msg, write_tag);
                            CkReferenceMsg(msg);

                            // Get homePe for the destination chare for optimized sends
                            auto dest_branch = pv[thisIndex].ckLocalBranch();
                            int homePe = dest_branch->homePe(pv[thisIndex].ckGetIndex());

                            if (CkNodeOf(homePe) == CkMyNode())
                                msg->cb = CkCallback(CkIndex_Vector::update_read(), thisProxy[thisIndex]);
                            else
                                ++WRITE_TAG;    // Copy is already being made. Safe to update reads!

                            pv[thisIndex].input_vector_1(msg);

                            // pv[thisIndex].input_vector_1(write_tag, vec.size(), vec.data());
                        }
                    }

                    // Operation send_to_2:
                    // Helper function to send the value of underlying vector
                    // to the site where an operation is to be performed.
                    when send_to_2[READ_TAG](int read_tag, int write_tag, CProxy_Vector pv)
                    {
                        serial "send_to_2"
                        {
                            vector_msg* msg = make_vector_msg(vec.size(), vec.data(), READ_TAG);
                            CkSetRefNum(msg, write_tag);
                            CkReferenceMsg(msg);

                            // Get homePe for the destination chare for optimized sends
                            auto dest_branch = pv[thisIndex].ckLocalBranch();
                            int homePe = dest_branch->homePe(pv[thisIndex].ckGetIndex());

                            if (CkNodeOf(homePe) == CkMyNode())
                                msg->cb = CkCallback(CkIndex_Vector::update_read(), thisProxy[thisIndex]);
                            else
                                ++WRITE_TAG;    // Copy is already being made. Safe to update reads!

                            pv[thisIndex].input_vector_2(msg);

                            // pv[thisIndex].input_vector_2(write_tag, vec.size(), vec.data());
                        }
                    }

                    // Operation send to certain section of matrix
                    // Helper function to multicast the value to the
                    // destination matrix.
                    when send_to_matrix_rows[READ_TAG](
                        int read_tag, int matrix_tag, int dimx, int dimy, CProxy_Matrix pv)
                    {
                        serial "send_to_matrix_rows"
                        {
                            int num_of_divisions = 
                                size / aum::sizes::block_size::value_c;
                            
                            if (size % aum::sizes::block_size::value_c != 0)
                                ++num_of_divisions;
                            
                            // Initial dimy
                            int initial_dimx = thisIndex * num_of_divisions;

                            int offset = 0;

                            for (int dimx_offset = 0; dimx_offset != num_of_divisions; ++dimx_offset)
                            {
                                for (int y = 0; y != dimy; ++y)
                                {
                                    part_vector_msg* msg = nullptr;

                                    // Is this the very last element and it's not
                                    // fully aligned with the offset?
                                    if ((size - offset) / aum::sizes::block_size::value_c == 0)
                                    {
                                        msg =
                                            make_part_vector_msg(dimy * num_of_divisions, (size - offset), vec.data() + offset);
                                    }
                                    else
                                    {
                                        msg =
                                            make_part_vector_msg(dimy * num_of_divisions, aum::sizes::block_size::value_c, vec.data() + offset);
                                    }

                                    CkSetRefNum(msg, matrix_tag);
                                    pv(initial_dimx + dimx_offset, y).part_vector_for_rows(msg);
                                }
                                
                                offset += aum::sizes::block_size::value_c;
                            }

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send to certain section of matrix
                    // Helper function to multicast the value to the
                    // destination matrix.
                    when send_to_matrix_rows_2[READ_TAG](
                        int read_tag, int matrix_tag, int dimx, int dimy, CProxy_Matrix pv)
                    {
                        serial "send_to_matrix_rows_2"
                        {
                            int num_of_divisions = 
                                size / aum::sizes::block_size::value_c;
                            
                            if (size % aum::sizes::block_size::value_c != 0)
                                ++num_of_divisions;
                            
                            // Initial dimy
                            int initial_dimx = thisIndex * num_of_divisions;

                            int offset = 0;

                            for (int dimx_offset = 0; dimx_offset != num_of_divisions; ++dimx_offset)
                            {
                                for (int y = 0; y != dimy; ++y)
                                {
                                    part_vector_msg* msg = nullptr;

                                    // Is this the very last element and it's not
                                    // fully aligned with the offset?
                                    if ((size - offset) / aum::sizes::block_size::value_c == 0)
                                    {
                                        msg =
                                            make_part_vector_msg(dimy * num_of_divisions, (size - offset), vec.data() + offset);
                                    }
                                    else
                                    {
                                        msg =
                                            make_part_vector_msg(dimy * num_of_divisions, aum::sizes::block_size::value_c, vec.data() + offset);
                                    }

                                    CkSetRefNum(msg, matrix_tag);
                                    pv(initial_dimx + dimx_offset, y).part_vector_for_rows_2(msg);
                                }
                                
                                offset += aum::sizes::block_size::value_c;
                            }

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send to certain section of matrix
                    // Helper function to multicast the value to the
                    // destination matrix.
                    when send_to_matrix_cols[READ_TAG](
                        int read_tag, int matrix_tag, int dimx, int dimy, CProxy_Matrix pv)
                    {
                        serial "send_to_matrix_cols"
                        {
                            int num_of_divisions = 
                                size / aum::sizes::block_size::value_r;
                            
                            if (size % aum::sizes::block_size::value_r != 0)
                                ++num_of_divisions;
                            
                            // Initial dimy
                            int initial_dimy = thisIndex * num_of_divisions;

                            int offset = 0;

                            for (int dimy_offset = 0; dimy_offset != num_of_divisions; ++dimy_offset)
                            {
                                for (int x = 0; x != dimx; ++x)
                                {
                                    part_vector_msg* msg = nullptr;
                                    // Is this the very last element and it's not
                                    // fully aligned with the offset?
                                    if ((size - offset) / aum::sizes::block_size::value_r == 0)
                                    {
                                        msg =
                                            make_part_vector_msg(dimx * num_of_divisions, (size - offset), vec.data() + offset);
                                    }
                                    else
                                    {
                                        msg =
                                            make_part_vector_msg(dimx * num_of_divisions, aum::sizes::block_size::value_r, vec.data() + offset);
                                    }

                                    CkSetRefNum(msg, matrix_tag);
                                    pv(x, initial_dimy + dimy_offset).part_vector_for_cols(msg);
                                }
                                
                                offset += aum::sizes::block_size::value_r;
                            }

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation print_value
                    when print_value[READ_TAG](int read_tag, std::string const& s)
                    {
                        serial "print_value"
                        {
                            ckout << s.c_str() << ": [";
                            for (auto elem : vec)
                                ckout << elem << ",";
                            ckout << "]" << endl;
                        }
                    }

                    // Operation exit
                    // Helper function that exits the program when called.
                    when exit[READ_TAG](int read_tag)
                    {
                        serial "exit"
                        {
                            if (thisIndex == 0)
                                ckout << "Exiting..." << endl;

                            contribute(CkCallback(CkCallback::ckExit));
                        }
                    }

                    // Operation exit
                    // Helper function that prints the time taken to execute
                    // up to this point in the program and then exits.
                    when exit[READ_TAG](int read_tag, double start, CProxy_Exitter proxy)
                    {
                        serial "exit_with_timer"
                        {
                            CkCallback cb(CkReductionTarget(Exitter, exit), proxy);
                            contribute(sizeof(double), &start, CkReduction::nop, cb);
                        }
                    }

                    // Operation update read tag
                    // Helper function that classifies a read contract as
                    // fulfilled
                    when inc_read[READ_TAG](int read_tag)
                    {
                        serial "inc_read"
                        {
                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation wait_one
                    // Helperfunction that waits until all existing reads and writes
                    // have occured.
                    when wait_one[WRITE_TAG](int write_tag, ck::future<bool> f)
                    {
                        serial "wait_one"
                        {
                            f.set(true);
                        }
                    }

                    ////////////////////////////////////////////////////////////
                    // Gather Operation                                       //
                    ////////////////////////////////////////////////////////////
                    when gather_vector[READ_TAG](int read_tag, CProxy_vector_container proxy)
                    {
                        serial "gather_vector"
                        {
                            auto msg = make_gather_msg(thisIndex, size, vec.data());
                            // TODO: Replace with reduction
                            proxy.gather(msg);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }
                }
            }
        }

        // BLAS kernels
        entry void axpy(int, double);
        entry void axpy_scalar(int, double);
        entry void norm(int, int, int, CProxy_Scalar);
        entry void max(int, int, CProxy_Scalar);
        entry void min(int, int, CProxy_Scalar);

        // Standard operations
        entry void add(int);
        entry void plus_add(int);
        entry void subtract(int);
        entry void minus_subtract(int, bool);
        entry void dot(int, int, CProxy_Scalar);
        entry void self_dot(int, int, CProxy_Scalar);
        entry void scalar_multiply(int, double);
        entry void aum_scalar_multiply(int);
        entry void assemble_reduced(int, int, int size, double arr[size], int);
        entry void copy_value(int);
        entry void reduce_add(int, int, CProxy_Scalar);
        entry void input_scalar(int, double);
        entry [nokeep] void input_vector_1(vector_msg*);
        entry [nokeep] void input_vector_2(vector_msg*);
        entry void send_to_1(int, int, CProxy_Vector);
        entry void send_to_2(int, int, CProxy_Vector);
        entry void send_to_matrix_rows(int, int, int, int, CProxy_Matrix);
        entry void send_to_matrix_rows_2(int, int, int, int, CProxy_Matrix);
        entry void send_to_matrix_cols(int, int, int, int, CProxy_Matrix);
        entry void update_read();
        entry void print_value(int, std::string const&);
        entry void exit(int);
        entry void exit(int, double, CProxy_Exitter);
        entry [reductiontarget] void inc_read(int);
        entry void wait_one(int, ck::future<bool>);

        entry void gather_vector(int, CProxy_vector_container);
    }
}
