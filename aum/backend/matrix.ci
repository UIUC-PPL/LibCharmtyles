// Copyright (C) 2022 Nikunj Gupta
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
//  Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program. If not, see <https://www.gnu.org/licenses/>.

module Matrix
{
    include "eigen3/Eigen/Core";

    include "aum/util/sizes.hpp";

    extern module Exitter;
    extern module Scalar;
    extern module Vector;

    extern message part_vector_msg;


    array[2D] Matrix
    {
        ////////////////////////////////////////////////////////////////////////
        // Basic Constructors                                                 //
        ////////////////////////////////////////////////////////////////////////
        entry Matrix(int, int, int, int);     // DimX, DimY, NumX, NumY
        
        // Constructor Args: DimX, DimY, Value, NumX, NumY
        entry Matrix(int, int, double, int, int);

        // DimX, DimY, NumX, NumY, Random Initialization
        entry Matrix(int, int, int, int, aum::random);

        entry Matrix(int, int, int, int, bool);

        // Initialize using generator
        // DimX, DimY, Generator, NumX, NumY
        entry Matrix(int, int, std::unique_ptr<aum::generator>, int, int);

        entry void initialize_data(int size_, double data[size_]);

        ////////////////////////////////////////////////////////////////////////
        // Operation over Matrix                                              //
        ////////////////////////////////////////////////////////////////////////
        entry void initialize_operation()
        {
            for (; WRITE_TAG > -1;)
            {
                case
                {
                    // Operation Add:
                    // The generalized addition operation takes two matrices
                    // as arguments and updates the current vector with the
                    // sum of the two matrices.
                    when
                        add[WRITE_TAG](int write_tag),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg1),
                        input_matrix_2[WRITE_TAG](matrix_msg* msg2)
                    {
                        serial "matrix_addition"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg1->mat, msg1->dimy, msg1->dimx);
                            emat_t e2(msg2->mat, msg2->dimy, msg2->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            e = e1 + e2;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    // Operation Add:
                    // The generalized addition operation takes one matrix
                    // as argument and updates the current matrix.
                    when
                        plus_add[WRITE_TAG](int write_tag),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg)
                    {
                        serial "matrix_single_addition"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg->mat, msg->dimy, msg->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            e += e1;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();

                        }
                    }

                    // Operation Subtract:
                    // The generalized subtraction operation takes two matrices
                    // as arguments and updates the current vector with the
                    // sum of the two matrices.
                    when
                        subtract[WRITE_TAG](int write_tag),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg1),
                        input_matrix_2[WRITE_TAG](matrix_msg* msg2)
                    {
                        serial "matrix_subtraction"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg1->mat, msg1->dimy, msg1->dimx);
                            emat_t e2(msg2->mat, msg2->dimy, msg2->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            e = e1 - e2;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg1->cb.isInvalid())
                                msg1->cb.send();

                            // Pointers were shared!
                            if (!msg2->cb.isInvalid())
                                msg2->cb.send();
                        }
                    }

                    // Operation Add:
                    // The generalized addition operation takes one vector
                    // as argument and updates the current vector.
                    when
                        minus_subtract[WRITE_TAG](int write_tag, bool inverted),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg)
                    {
                        serial "matrix_single_subtraction"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg->mat, msg->dimy, msg->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            if (inverted)
                                e = e1 - e;
                            else
                                e -= e1;
                            
                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation scalar multiply:
                    // The generalized index wise scalar multiply
                    when
                        scalar_multiply[WRITE_TAG](int write_tag, double value),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg)
                    {
                        serial "scalar_multiply"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg->mat, msg->dimy, msg->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            e = value * e1;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }

                    // Operation scalar multiply:
                    // The generalized index wise scalar multiply
                    when
                        aum_scalar_multiply[WRITE_TAG](int write_tag),
                        input_matrix_1[WRITE_TAG](matrix_msg* msg),
                        input_scalar[WRITE_TAG](int write_tag, double value)
                    {
                        serial "aum_scalar_multiply"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            emat_t e1(msg->mat, msg->dimy, msg->dimx);

                            emat_t e(mat.data(), dimy, dimx);

                            e = value * e1;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;

                            // Pointers were shared!
                            if (!msg->cb.isInvalid())
                                msg->cb.send();
                        }
                    }  

                    // Operation reduce_add:
                    // Helper reduction that adds all elements of a vector
                    when
                        reduce_add[READ_TAG](int read_tag, int scalar_tag, CProxy_Scalar proxy)
                    {
                        serial "reduce_add"
                        {
                            using evec_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            evec_t e(mat.data(), dimy, dimx);

                            double val = e.sum();

                            CkCallback cb(CkReductionTarget(Scalar, set_reduced_value), proxy);
                            contribute(sizeof(double), &val, CkReduction::sum_double, cb, scalar_tag);

                            // Since dot product isn't updating the vector
                            // itself, we consider this operation as a read and
                            // not a write.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation outer-product
                    // The generalized vector-vector outer product
                    when
                        outer[WRITE_TAG](int write_tag),
                        part_vector_for_rows(part_vector_msg* msg1),
                        part_vector_for_rows_2(part_vector_msg* msg2)
                    {
                        serial "outer"
                        {
                            using evec_row_t = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, 1>>;
                            using evec_col_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;

                            evec_row_t rv(msg1->arr, msg1->size);
                            evec_col_t cv(msg2->arr, msg2->size);

                            using evec_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;

                            evec_t e(mat.data(), dimy, dimx);
                            e = rv * cv;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Operation matrix-vector multiply
                    // The generalized matrix-vector multiply
                    when
                        matrix_vector_multiply[READ_TAG](int read_tag, int vector_tag, CProxy_Vector proxy),
                        part_vector_for_rows[READ_TAG](part_vector_msg* msg)
                    {
                        serial "matrix_vector_multiply"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;
                            using evec_t = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, 1>>;
                            using vec_t = Eigen::Matrix<double, Eigen::Dynamic, 1>;

                            emat_t em(mat.data(), dimy, dimx);
                            evec_t ev(msg->arr, msg->size);

                            vec_t eres = em * ev;

                            // Figure out the offset and send a reduction!
                            int num_elems_before = thisIndex.x * aum::sizes::block_size::value_c;
                            int offset = 
                                (num_elems_before % aum::sizes::array_size::value) / aum::sizes::block_size::value_c;
                            int send_index = num_elems_before / aum::sizes::array_size::value;

                            proxy(send_index).assemble_reduced(vector_tag, offset, eres.size(), eres.data(), msg->red_count);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation matrix-vector multiply
                    // The generalized matrix-vector multiply
                    when
                        vector_matrix_multiply[READ_TAG](int read_tag, int vector_tag, CProxy_Vector proxy),
                        part_vector_for_cols[READ_TAG](part_vector_msg* msg)
                    {
                        serial "vector_matrix_multiply"
                        {
                            using emat_t = Eigen::Map<Eigen::Matrix<
                                double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>;
                            using evec_t = Eigen::Map<Eigen::Matrix<double, 1, Eigen::Dynamic>>;
                            using vec_t = Eigen::Matrix<double, 1, Eigen::Dynamic>;

                            emat_t em(mat.data(), dimy, dimx);
                            evec_t ev(msg->arr, msg->size);

                            vec_t eres = ev * em;

                            // Figure out the offset and send a reduction!
                            int num_elems_before = thisIndex.y * aum::sizes::block_size::value_r;
                            int offset = 
                                (num_elems_before % aum::sizes::array_size::value) / aum::sizes::block_size::value_r;
                            int send_index = num_elems_before / aum::sizes::array_size::value;

                            proxy(send_index).assemble_reduced(vector_tag, offset, eres.size(), eres.data(), msg->red_count);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send_to_1:
                    // Helper function to send the value of underlying vector
                    // to the site where an operation is to be performed.
                    when send_to_1[READ_TAG](int read_tag, int write_tag, CProxy_Matrix pv)
                    {
                        serial "send_to_1"
                        {
                            matrix_msg* msg = make_matrix_msg(dimx, dimy, mat.data(), READ_TAG);
                            CkSetRefNum(msg, write_tag);
                            CkReferenceMsg(msg);

                            // Get homePe for the destination chare for optimized sends
                            auto dest_branch = pv(thisIndex.x, thisIndex.y).ckLocalBranch();
                            int homePe = dest_branch->homePe(pv(thisIndex.x, thisIndex.y).ckGetIndex());

                            if (CkNodeOf(homePe) == CkMyNode())
                                msg->cb = CkCallback(CkIndex_Matrix::update_read(), thisProxy(thisIndex.x, thisIndex.y));
                            else
                                ++WRITE_TAG;    // Copy is already being made. Safe to update reads!

                            pv(thisIndex.x, thisIndex.y).input_matrix_1(msg);

                            // pv(thisIndex.x, thisIndex.y).input_matrix_1(write_tag, dimx, dimy, mat.size(), mat.data());
                        }
                    }

                    // Operation send_to_2:
                    // Helper function to send the value of underlying vector
                    // to the site where an operation is to be performed.
                    when send_to_2[READ_TAG](int read_tag, int write_tag, CProxy_Matrix pv)
                    {
                        serial "send_to_2"
                        {
                            matrix_msg* msg = make_matrix_msg(dimx, dimy, mat.data(), READ_TAG);
                            CkSetRefNum(msg, write_tag);
                            CkReferenceMsg(msg);

                            // Get homePe for the destination chare for optimized sends
                            auto dest_branch = pv(thisIndex.x, thisIndex.y).ckLocalBranch();
                            int homePe = dest_branch->homePe(pv(thisIndex.x, thisIndex.y).ckGetIndex());

                            if (CkNodeOf(homePe) == CkMyNode())
                                msg->cb = CkCallback(CkIndex_Matrix::update_read(), thisProxy(thisIndex.x, thisIndex.y));
                            else
                                ++WRITE_TAG;    // Copy is already being made. Safe to update reads!

                            pv(thisIndex.x, thisIndex.y).input_matrix_2(msg);

                            // pv(thisIndex.x, thisIndex.y).input_matrix_2(write_tag, dimx, dimy, mat.size(), mat.data());
                        }
                    }

                    // Operation update_read:
                    // Callback function called when a send function sends a
                    // pointer instead of actual data. Required for the fulfillment
                    // of a read contract.
                    when update_read()
                    {
                        serial "update_read"
                        {
                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    when print_value[READ_TAG](int read_tag, std::string const& s)
                    {
                        serial "print_value"
                        {
                            ckout << s.c_str() << ": [";
                            for (int y = 0; y != dimy; ++y)
                            {
                                ckout << "[";
                                for (int x = 0; x != dimx; ++x)
                                {
                                    ckout << mat[y * dimx + x] << ",";
                                }
                                ckout << "]" << endl;
                            }
                            ckout << "]" << endl;
                        }
                    }

                    // Operation exit
                    // Helper function that exits the program when called.
                    when exit[READ_TAG](int read_tag)
                    {
                        serial "exit"
                        {
                            if (thisIndex.x == 0 && thisIndex.y == 0)
                                ckout << "Exiting..." << endl;

                            contribute(CkCallback(CkCallback::ckExit));
                        }
                    }

                    // Operation exit
                    // Helper function that prints the time taken to execute
                    // up to this point in the program and then exits.
                    when exit[READ_TAG](int read_tag, double start, CProxy_Exitter proxy)
                    {
                        serial "exit_with_timer"
                        {
                            CkCallback cb(CkReductionTarget(Exitter, exit), proxy);
                            contribute(sizeof(double), &start, CkReduction::nop, cb);
                        }
                    }

                    // Operation wait_one
                    // Helperfunction that waits until all existing reads and writes
                    // have occured.
                    when wait_one[WRITE_TAG](int write_tag, ck::future<bool> f)
                    {
                        serial "wait_one"
                        {
                            f.set(true);
                        }
                    }

                    ////////////////////////////////////////////////////////////
                    // Gather Operation                                       //
                    ////////////////////////////////////////////////////////////
                    when gather_matrix[READ_TAG](int read_tag, CProxy_matrix_container proxy)
                    {
                        serial "gather_matrix"
                        {
                            auto msg = make_gather_msg(thisIndex.x, thisIndex.y, dimx, dimy, mat.data());
                            // TODO: Replace with reduction
                            proxy.gather(msg);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }
                }
            }
        }

        entry void add(int);
        entry void plus_add(int);
        entry void subtract(int);
        entry void minus_subtract(int, bool);
        entry void scalar_multiply(int, double);
        entry void aum_scalar_multiply(int);
        entry void reduce_add(int, int, CProxy_Scalar);
        entry void matrix_vector_multiply(int, int, CProxy_Vector);
        entry void vector_matrix_multiply(int, int, CProxy_Vector);
        entry void outer(int);
        entry void input_scalar(int, double);
        entry void input_matrix_1(matrix_msg*);
        entry void input_matrix_2(matrix_msg*);
        entry void part_vector_for_rows(part_vector_msg*);
        entry void part_vector_for_rows_2(part_vector_msg*);
        entry void part_vector_for_cols(part_vector_msg*);
        entry void send_to_1(int, int, CProxy_Matrix);
        entry void send_to_2(int, int, CProxy_Matrix);
        entry void update_read();
        entry void print_value(int, std::string const&);
        entry void exit(int);
        entry void exit(int, double, CProxy_Exitter);
        entry void wait_one(int, ck::future<bool>);

        entry void gather_matrix(int, CProxy_matrix_container);
    }
}
